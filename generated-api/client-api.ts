/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign in with email and password */
        post: operations["signInWithEmailAndPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all users */
        get: operations["listUsers"];
        put?: never;
        /** Create single user */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get single user */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update single user */
        patch: operations["updateUser"];
        trace?: never;
    };
    "/offices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all offices */
        get: operations["listOffices"];
        put?: never;
        /** Create single office */
        post: operations["createOffice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offices/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get single office */
        get: operations["getOffice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update single office */
        patch: operations["updateOffice"];
        trace?: never;
    };
    "/assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all assignments */
        get: operations["listAssignments"];
        put?: never;
        /** Create single assignment */
        post: operations["createAssignment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assignments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get single assignment */
        get: operations["getAssignment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update single assignment */
        patch: operations["updateAssignment"];
        trace?: never;
    };
    "/offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all offers */
        get: operations["listOffers"];
        put?: never;
        /** Create single offer */
        post: operations["createOffer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get single offer */
        get: operations["getOffer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update single offer */
        patch: operations["updateOffer"];
        trace?: never;
    };
    "/lawsuits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all lawsuits */
        get: operations["listLawsuits"];
        put?: never;
        /** Create single lawsuit */
        post: operations["createLawsuit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lawsuits/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get single lawsuit */
        get: operations["getLawsuit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update single lawsuit */
        patch: operations["updateLawsuit"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SignInDto: {
            /** Format: email */
            email: string;
            password: string;
        };
        SignInResponseDto: {
            access_token: string;
        };
        CreateUserDto: {
            /** Format: email */
            email: string;
            firstName: string;
            lastName: string;
            /**
             * @default owner
             * @enum {string}
             */
            role: "admin" | "owner" | "employee";
            /** Format: uuid */
            office: string;
        };
        UserResponseDto: {
            email: string;
            firstName: string;
            lastName: string;
            /** @enum {string} */
            role: "admin" | "owner" | "employee";
            id: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ListUsersFiltersDto: {
            email?: string;
            firstName?: string;
            lastName?: string;
            /** @enum {string} */
            role?: "admin" | "owner" | "employee";
        };
        ListUsersDto: {
            /**
             * @default [
             *       "email"
             *     ]
             * @enum {string}
             */
            sort: "email" | "-email" | "firstName" | "-firstName" | "lastName" | "-lastName";
            filterBy?: components["schemas"]["ListUsersFiltersDto"];
            /** @default 1 */
            page: number;
            /** @default 10 */
            perPage: number;
        };
        PaginationMetaResponseDto: {
            page: number;
            perPage: number;
            total: number;
            totalPages: number;
        };
        UpdateUserDto: {
            /** Format: email */
            email?: string;
            firstName?: string;
            lastName?: string;
            /**
             * @default owner
             * @enum {string}
             */
            role: "admin" | "owner" | "employee";
            /** Format: uuid */
            office?: string;
        };
        CreateOfficeDto: {
            name: string;
            description?: string;
            /** Format: email */
            email: string;
        };
        OfficeResponseDto: {
            owner: Record<string, never>;
            employees: Record<string, never>;
            name: string;
            description?: string;
            id: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ListOfficesFiltersDto: {
            name?: string;
            description?: string;
        };
        ListOfficesDto: {
            /**
             * @default [
             *       "name"
             *     ]
             * @enum {string}
             */
            sort: "name" | "-name";
            filterBy?: components["schemas"]["ListOfficesFiltersDto"];
            /** @default 1 */
            page: number;
            /** @default 10 */
            perPage: number;
        };
        UpdateOfficeDto: {
            name?: string;
            description?: string;
            /** Format: email */
            email?: string;
        };
        CreateAssignmentDto: {
            client: string;
            name: string;
            description: string;
            /**
             * @default Prawo pracy
             * @enum {string}
             */
            branch: "Prawo pracy" | "Prawo gospodarcze" | "ESG" | "Prawo własności intelektualnej" | "Prawo administracyjne" | "Nieruchomości" | "Prawo korporacyjne" | "Inne";
            minPayment: number;
            maxPayment: number;
            /**
             * @default OFERTA ZAAKCEPTOWANA
             * @enum {string}
             */
            status: "OFERTA ZAAKCEPTOWANA" | "OFERTA ROZPATRYWANA" | "OFERTA ODRZUCONA" | "W TRAKCIE PROWADZENIA" | "ZAKOŃCZONA";
            /** Format: date-time */
            assignmentDeadline: string;
            /** Format: date-time */
            trailDate: string;
        };
        AssignmentResponseDto: {
            owner: Record<string, never>;
            client: string;
            name: string;
            description?: string;
            /** @enum {string} */
            branch: "Prawo pracy" | "Prawo gospodarcze" | "ESG" | "Prawo własności intelektualnej" | "Prawo administracyjne" | "Nieruchomości" | "Prawo korporacyjne" | "Inne";
            minPayment?: number;
            maxPayment?: number;
            /** @enum {string} */
            status: "OFERTA ZAAKCEPTOWANA" | "OFERTA ROZPATRYWANA" | "OFERTA ODRZUCONA" | "W TRAKCIE PROWADZENIA" | "ZAKOŃCZONA";
            /** Format: date-time */
            assignmentDeadline: string;
            /** Format: date-time */
            trailDate?: string;
            officeGiven: Record<string, never>;
            id: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ListAssignmentsFiltersDto: {
            /** Format: uuid */
            owner?: string;
            client?: string;
            name?: string;
            description?: string;
            /** @enum {string} */
            branch?: "Prawo pracy" | "Prawo gospodarcze" | "ESG" | "Prawo własności intelektualnej" | "Prawo administracyjne" | "Nieruchomości" | "Prawo korporacyjne" | "Inne";
            minPayment?: number;
            maxPayment?: number;
            /** @enum {string} */
            status?: "OFERTA ZAAKCEPTOWANA" | "OFERTA ROZPATRYWANA" | "OFERTA ODRZUCONA" | "W TRAKCIE PROWADZENIA" | "ZAKOŃCZONA";
            /** Format: date-time */
            assignmentDeadline?: string;
            /** Format: date-time */
            trailDate?: string;
        };
        ListAssignmentsDto: {
            /**
             * @default [
             *       "name"
             *     ]
             * @enum {string}
             */
            sort: "client" | "-client" | "name" | "-name" | "minPayment" | "-minPayment" | "maxPayment" | "-maxPayment" | "assignmentDeadline" | "-assignmentDeadline" | "trailDate" | "-trailDate";
            filterBy?: components["schemas"]["ListAssignmentsFiltersDto"];
            /** @default 1 */
            page: number;
            /** @default 10 */
            perPage: number;
        };
        UpdateAssignmentDto: {
            client?: string;
            name?: string;
            description?: string;
            /**
             * @default Prawo pracy
             * @enum {string}
             */
            branch: "Prawo pracy" | "Prawo gospodarcze" | "ESG" | "Prawo własności intelektualnej" | "Prawo administracyjne" | "Nieruchomości" | "Prawo korporacyjne" | "Inne";
            minPayment?: number;
            maxPayment?: number;
            /**
             * @default OFERTA ZAAKCEPTOWANA
             * @enum {string}
             */
            status: "OFERTA ZAAKCEPTOWANA" | "OFERTA ROZPATRYWANA" | "OFERTA ODRZUCONA" | "W TRAKCIE PROWADZENIA" | "ZAKOŃCZONA";
            /** Format: date-time */
            assignmentDeadline?: string;
            /** Format: date-time */
            trailDate?: string;
        };
        CreateOfferDto: {
            /** Format: uuid */
            assignmentId: string;
            message?: string;
            socialMediaLink?: string;
            attachments?: string[];
        };
        OfferResponseDto: {
            holder: Record<string, never>;
            assignment?: Record<string, never>;
            message?: string;
            socialMediaLink?: string;
            attachments?: string[];
            id: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ListOffersFiltersDto: {
            /** Format: uuid */
            holder?: string;
            /** Format: uuid */
            assignment?: string;
        };
        ListOffersDto: {
            /**
             * @default [
             *       "-createdAt"
             *     ]
             * @enum {string}
             */
            sort: "createdAt" | "-createdAt" | "updatedAt" | "-updatedAt";
            filterBy?: components["schemas"]["ListOffersFiltersDto"];
            /** @default 1 */
            page: number;
            /** @default 10 */
            perPage: number;
        };
        UpdateOfferDto: {
            /** Format: uuid */
            assignmentId?: string;
            message?: string;
            socialMediaLink?: string;
            attachments?: string[];
        };
        CreateLawsuitDto: {
            /** Format: uuid */
            offerId: string;
        };
        LawsuitResponseDto: {
            title: string;
            lawyer: Record<string, never>;
            officeTaken: Record<string, never>;
            officeGiven?: Record<string, never>;
            client: string;
            /** @enum {string} */
            status?: "OFERTA ZAAKCEPTOWANA" | "OFERTA ROZPATRYWANA" | "OFERTA ODRZUCONA" | "W TRAKCIE PROWADZENIA" | "ZAKOŃCZONA";
            payment: number;
            assignment?: Record<string, never>;
            offer?: Record<string, never>;
            id: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ListLawsuitsFiltersDto: {
            /** Format: uuid */
            lawyer?: string;
            /** Format: uuid */
            officeTaken?: string;
            /** Format: uuid */
            officeGiven?: string;
            /** Format: uuid */
            assignment?: string;
            /** Format: uuid */
            offer?: string;
            status?: string;
            title?: string;
        };
        ListLawsuitsDto: {
            /**
             * @default [
             *       "-createdAt"
             *     ]
             * @enum {string}
             */
            sort: "createdAt" | "-createdAt" | "updatedAt" | "-updatedAt" | "title" | "-title";
            filterBy?: components["schemas"]["ListLawsuitsFiltersDto"];
            /** @default 1 */
            page: number;
            /** @default 10 */
            perPage: number;
        };
        UpdateLawsuitDto: {
            title: string;
            /** Format: uuid */
            offerId?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    signInWithEmailAndPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInDto"];
            };
        };
        responses: {
            /** @description Returns access token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignInResponseDto"];
                };
            };
        };
    };
    listUsers: {
        parameters: {
            query: {
                sort: "email" | "-email" | "firstName" | "-firstName" | "lastName" | "-lastName";
                filterBy?: components["schemas"]["ListUsersFiltersDto"];
                page: number;
                perPage: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        meta?: components["schemas"]["PaginationMetaResponseDto"];
                        items?: components["schemas"]["UserResponseDto"][];
                    };
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description Returns single user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns single user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description Returns single user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
        };
    };
    listOffices: {
        parameters: {
            query: {
                sort: "name" | "-name";
                filterBy?: components["schemas"]["ListOfficesFiltersDto"];
                page: number;
                perPage: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns offices */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        meta?: components["schemas"]["PaginationMetaResponseDto"];
                        items?: components["schemas"]["OfficeResponseDto"][];
                    };
                };
            };
        };
    };
    createOffice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOfficeDto"];
            };
        };
        responses: {
            /** @description Returns single office */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfficeResponseDto"];
                };
            };
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfficeResponseDto"];
                };
            };
        };
    };
    getOffice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns single office */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfficeResponseDto"];
                };
            };
        };
    };
    updateOffice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOfficeDto"];
            };
        };
        responses: {
            /** @description Returns single office */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfficeResponseDto"];
                };
            };
        };
    };
    listAssignments: {
        parameters: {
            query: {
                sort: "client" | "-client" | "name" | "-name" | "minPayment" | "-minPayment" | "maxPayment" | "-maxPayment" | "assignmentDeadline" | "-assignmentDeadline" | "trailDate" | "-trailDate";
                filterBy?: components["schemas"]["ListAssignmentsFiltersDto"];
                page: number;
                perPage: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns assignments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        meta?: components["schemas"]["PaginationMetaResponseDto"];
                        items?: components["schemas"]["AssignmentResponseDto"][];
                    };
                };
            };
        };
    };
    createAssignment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAssignmentDto"];
            };
        };
        responses: {
            /** @description Returns single assignment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignmentResponseDto"];
                };
            };
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignmentResponseDto"];
                };
            };
        };
    };
    getAssignment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns single assignment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignmentResponseDto"];
                };
            };
        };
    };
    updateAssignment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAssignmentDto"];
            };
        };
        responses: {
            /** @description Returns single assignment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignmentResponseDto"];
                };
            };
        };
    };
    listOffers: {
        parameters: {
            query: {
                sort: "createdAt" | "-createdAt" | "updatedAt" | "-updatedAt";
                filterBy?: components["schemas"]["ListOffersFiltersDto"];
                page: number;
                perPage: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns offers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        meta?: components["schemas"]["PaginationMetaResponseDto"];
                        items?: components["schemas"]["OfferResponseDto"][];
                    };
                };
            };
        };
    };
    createOffer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOfferDto"];
            };
        };
        responses: {
            /** @description Returns single offer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferResponseDto"];
                };
            };
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferResponseDto"];
                };
            };
        };
    };
    getOffer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns single offer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferResponseDto"];
                };
            };
        };
    };
    updateOffer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOfferDto"];
            };
        };
        responses: {
            /** @description Returns single offer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferResponseDto"];
                };
            };
        };
    };
    listLawsuits: {
        parameters: {
            query: {
                sort: "createdAt" | "-createdAt" | "updatedAt" | "-updatedAt" | "title" | "-title";
                filterBy?: components["schemas"]["ListLawsuitsFiltersDto"];
                page: number;
                perPage: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns lawsuits */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        meta?: components["schemas"]["PaginationMetaResponseDto"];
                        items?: components["schemas"]["LawsuitResponseDto"][];
                    };
                };
            };
        };
    };
    createLawsuit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLawsuitDto"];
            };
        };
        responses: {
            /** @description Returns single lawsuit */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LawsuitResponseDto"];
                };
            };
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LawsuitResponseDto"];
                };
            };
        };
    };
    getLawsuit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns single lawsuit */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LawsuitResponseDto"];
                };
            };
        };
    };
    updateLawsuit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLawsuitDto"];
            };
        };
        responses: {
            /** @description Returns single lawsuit */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LawsuitResponseDto"];
                };
            };
        };
    };
}
